<?php

/*
* Implements hook_menu
* https://www.drupal.org/node/1517824 
*
*/

use Drupal\eventbrite_sboc\Helper\EBConsts;
use Drupal\eventbrite_sboc\Helper\EBOAuth;
use Drupal\eventbrite_sboc\Helper\EBEvents;
use Drupal\eventbrite_sboc\Helper\EBAttendees;

/**
* Implements hook_menu
* @return array
*/
function eventbrite_sboc_menu(){
  $items = array();
  
  $items[EBConsts::EBS_ADMINMENUROOT] = array(
    'title' => t('Eventbrite for SBOC'),
    'description' => 'Eventbrite SBOC Integration Module',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_eventbrite_sboc_form_oauth_credentials',),
    'access arguments' => array(0),
    'file' => 'admin_ui.oauth.inc',
	  'file path' => drupal_get_path('module', 'eventbrite_sboc'). '/inc',
	  'weight' => 0,	
  );
  
  $items[EBConsts::EBS_ADMINMENUROOT. '/oauth'] = array(
    // Access callback, page callback, and theme callback will be inherited
    // from 'admin/config/system/eventbrite_sboc' (a.k.a admin root = EBS_ADMINMENUROOT)
    // if not overriden here!
    'title' => t('Oauth Setup'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'access arguments' => array(0),
    'weight' => 0,
  );
  
  
  $items[EBConsts::EBS_ADMINMENUROOT. '/oauth/credentials'] = array(
    'title' => t('Manage Credentials'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );
  
  $items[EBConsts::EBS_ADMINMENUROOT. '/oauth/authorize'] = array(
    'title' => t('Authorize Application'),
    'type' => MENU_LOCAL_TASK,
    'page callback' => '_eventbrite_sboc_init_oauth_sequence',
    'access arguments' => array(EBConsts::EBS_ADMINISTER_ATTENDEES_MODULE,),
    'weight' => 1,
  );
  
  $items[EBConsts::EBS_ADMINMENUROOT. '/event'] = array(
    'title' => t('Event Setup'),
    'type' => MENU_LOCAL_TASK,
    'page callback' => '_eventbrite_sboc_event_info',
    'access arguments' => array(EBConsts::EBS_ADMINISTER_ATTENDEES_MODULE,),
    'file' => 'admin_ui.event.inc',
	  'file path' => drupal_get_path('module', 'eventbrite_sboc'). '/inc',
    'weight' => 1,
  );
  
  $items[EBConsts::EBS_ADMINMENUROOT. '/event/info'] = array(
    'title' => t('Event'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );
  
  $items[EBConsts::EBS_ADMINMENUROOT. '/event/orders'] = array(
    'title' => t('Orders'),
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
//     'page arguments' => array('459088098',),
    'page arguments' => array('_eventbrite_sboc_form_select_order',),
    'access arguments' => array(EBConsts::EBS_ADMINISTER_ATTENDEES_MODULE,),
    'file' => 'admin_ui.event.inc',
	  'file path' => drupal_get_path('module', 'eventbrite_sboc'). '/inc',
    'weight' => 1,
  );
  
  $items[EBConsts::EBS_ADMINMENUROOT. '/event/orders/%order'] = array(
    'title' => t('Order View'),
    'type' => MENU_CALLBACK,
    'page callback' => '_eventbrite_sboc_display_order',
    'page arguments' => array(6),
    'access arguments' => array(EBConsts::EBS_ADMINISTER_ATTENDEES_MODULE,),
    'weight' => 1,
  );
  
  $items[EBConsts::EBS_ADMINMENUROOT. '/event/attendees'] = array(
    'title' => t('Attendees'),         
    'type' => MENU_LOCAL_TASK, 
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_eventbrite_sboc_form_select_attendee_order',),
//     'page arguments' => array('https://www.eventbriteapi.com/v3/orders/459146160',), 
    'access arguments' => array(EBConsts::EBS_ADMINISTER_ATTENDEES_MODULE,),
    'file' => 'admin_ui.event.inc',
	  'file path' => drupal_get_path('module', 'eventbrite_sboc'). '/inc',
    'weight' => 2,
  );
  
  $items[EBConsts::EBS_ADMINMENUROOT. '/event/attendees/%attendee_order'] = array(
    'title' => t('Attendee Order'),         
    'type' => MENU_CALLBACK, 
    'page callback' => '_eventbrite_sboc_display_order',
    'page arguments' => array(6),
    'access arguments' => array(EBConsts::EBS_ADMINISTER_ATTENDEES_MODULE,),
    'weight' => 2,
  );
  
  $items[EBConsts::EBS_ADMINMENUROOT. '/event/attendees/op1'] = array(
    'title' => t('Attendees Op1'),
    'type' => MENU_LOCAL_ACTION,    
    'page callback' => '_eventbrite_sboc_test_local_action',
    'page arguments' => array('Opporunity Awaits...',),
    'access arguments' => array(0),
    'weight' => 0,
  );
  
  $items[EBConsts::EBS_ADMINMENUROOT. '/oauthcallback'] = array(
    'title' => t('OAuth Callback'),
    'type' => MENU_CALLBACK,    
    'page callback' => '_eventbrite_sboc_oauth_callback',
    'access arguments' => array(0),
    'weight' => 0,
  );
  
  // Webhook call back
  $items[EBConsts::EBS_URL_WEBHOOK_ORDER_PLACED] = array(
    'title' => t('Eventbrite Webhook Callback'),
    'type' => MENU_CALLBACK,    
    'page callback' => '_eventbrite_sboc_webhook_callback',
    'access callback' => '_eventbrite_sboc_webhook_access_check',
    'weight' => 0,
  );
  
  $items[EBConsts::EBS_URL_OAUTH_FLOW_SUCCESS] = array(
    'title' => t('Eventbrite OAuth Flow Success'),
    'type' => MENU_CALLBACK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_eventbrite_sboc_oauth_success'),
    'access arguments' => array(0),
    'file' => 'admin_ui.oauth.inc',
	  'file path' => drupal_get_path('module', 'eventbrite_sboc'). '/inc',
    'weight' => 0,
  );
  
  $items[EBConsts::EBS_URL_OAUTH_FLOW_FAILURE] = array(
    'title' => t('Eventbrite OAuth Flow Failure'),
    'type' => MENU_CALLBACK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_eventbrite_sboc_oauth_failure'),
    'access arguments' => array(0),
    'file' => 'admin_ui.oauth.inc',
	  'file path' => drupal_get_path('module', 'eventbrite_sboc'). '/inc',
    'weight' => 0,
  );
  
  return $items;
}

/**
* Implements hook_oauth2_clients
* @return array
*/
function eventbrite_sboc_oauth2_clients(){
  $oauth2_clients = array();
  $client_id = variable_get(EBConsts::EBS_CONFIG_CONSUMER_KEY, '');
  $client_secret = variable_get(EBConsts::EBS_CONFIG_CONSUMER_SECRET, '');
  $oauth2_clients[EBConsts::EBS_OAUTH2_SETTINGS_LABEL] = array(
    'token_endpoint' => EBConsts::EBS_EVENTBRITEOAUTH . '/token',
    'auth_flow' => 'server-side',
    'client_id' => $client_id,
    'client_secret' => $client_secret,
    'authorization_endpoint' => EBConsts::EBS_EVENTBRITEOAUTH . '/authorize',
    'redirect_uri' => EBConsts::EBS_APPLICATIONDOMAIN. EBConsts::EBS_APPLICATIONCALLBACKURL,
  );

  return $oauth2_clients;
} 

/**
* Implements hook_help
* @param string $path
* @param string $arg
* @return  array
*/
function eventbrite_sboc_help($path, $arg){
  $output = '';

  switch($path){
		case 'admin/help#eventbrite_sboc':
    case 'admin/config/system/eventbrite_sboc':
      $output = <<<'HELP'
        <p>
        This module manages communication with Eventbrite and Mandrill services on behalf of Spelling Bee Of Canada (SBOC).
        Designed/Developed/Maintained by Holbrook Goodman Technologies.
        </p>
HELP;
		  break;
    case 'admin/config/system/eventbrite_sboc/event':
      $output = <<<'HELP'
         <h3>Event Setup -- Help</h3>
         <p>
           <ul>
             <li>
               Enter the event id found by logging into eventbrite.com and looking 
               at the url e.g. eventbrite.com/myevent?eid=<span style="font-weight: bold;">999999999</span>
             </li>
             <li>
               Select the number of days, prior to the current day, to select records for when performing 
               background updates. (Recommended value is: <span style="font-weight: bold;">1</span>)
             </li>
             <li>
               Select by title the confirmation email to be sent after each registration is processed.
               <span style="font-weight: bold;">Email Message 1</span> is sent the first time a new registration and user account are created.
               <span style="font-weight: bold;">Email Message 2</span> is sent when a registration is created or modified for an existing user.
             </li>
           </ul>  
           If you have entered the correct event id, information will be displayed about the event in the
           <span style="font-weight: bold;">EVENT INFORMATION</span> section 
         </p> 
HELP;
      break;
    case 'admin/config/system/eventbrite_sboc/event/orders':
      $output = <<<'HELP'
         <h3>Event Orders -- Help</h3>
         <p>
           <ul>
             <li>Enter a valid order number to retrieve the order details from Eventbrite</li> 
           </ul>
         </p>
HELP;
      break;
	  default:
	    break;
	}
	
  return $output;
}

function _eventbrite_sboc_test_local_action($msg){
  return $msg;
}

/**
* Implements hook_cronapi
* @param none
* @return  n/a
*/
function eventbrite_sboc_cronapi(){
  $items = array();
  
  $items['EBS_CRON_KEY1'] = array(
    'title' => t('Eventbrite SBOC v2'),
    'callback' => '_eventbrite_sboc_cron_job_config_queue',
    'callback arguments' => array('EBS_CRON_KEY1'),
    'tags' => array('eventbrite_sboc'),
    'scheduler' => array(
      'name' => 'crontab',
      'crontab' => array(
        'rules' => array('*/5 * * * *',),
      ),
    ),
  );
  
  return $items;
}

/**
* Implements hook_cronapi
* @param String $cron_key
* @return n/a
*/
function _eventbrite_sboc_cron_job_config_queue($arg = ''){
  $data = new \StdClass;
  $data->saveChangedOnly = TRUE;
  $data->strictlyProcessChangedRecords = FALSE;
  $queue = DrupalQueue::get('ebs_process_changed_records');
  $queue->createItem($data);
}

/**
* Implements hook_cron_queue_info
* @param none
* @return array
*/
function eventbrite_sboc_cron_queue_info(){
  $queues = array();
  
  $queues['ebs_process_changed_records'] = array(
    'worker callback' => '_eventbrite_sboc_process_cron_queue',
    'time' => 120,
  );
   
  return $queues;
}


/**
* Cron Quere worker callback
* @param Object $data
* @return n/a
*/
function _eventbrite_sboc_process_cron_queue($data){
  _eventbrite_sboc_cron_update_attendees($data->saveChangedOnly, $data->strictlyProcessChangedRecords);
}

/**
* Processes attendee records when invoked from Cron
* @param Boolean $save_changed_only
* @param Boolean $strictly_process_changed_records
* @return  n/a
*/
function _eventbrite_sboc_cron_update_attendees($save_changed_only = FALSE, $strictly_process_changed_records = TRUE){
  try{
    $ev = _eventbrite_sboc_init_event();
    $tz = variable_get('date_default_timezone', EBConsts::tz_Site_Default);
    $dt = new \DateTimeZone($tz);
    $do = new \DateTime('now', $dt);
    // bof: Set interval
    // e.g. P10D  Period of 10 Days | PT2H Period of 2 Hours
//    $days = variable_get(EBConsts::EBS_CONFIG_CHANGED_SINCE_DAYS, EBConsts::EBS_CONFIG_DEFAULT_CHANGED_SINCE_DAYS);
    $hours = variable_get(EBConsts::EBS_CONFIG_CHANGED_SINCE_HOURS, EBConsts::EBS_CONFIG_DEFAULT_CHANGED_SINCE_HOURS);
//    $interval = format_string('P@intervalD', array('@interval' => $days,));
    $interval = format_string('PT@intervalH', array('@interval' => $hours,));
    $dur = new \DateInterval($interval);
    $do->sub($dur);
    $do->setTimezone(new \DateTimeZone(EBConsts::tz_UTC));
    // eof: Set interval

    // bof: Update watchdog table
    $date_param = $do->format(EBConsts::EBS_EBDATEFORMAT_UTC);
    $watchdog_params = array(
      '@date_param' => $date_param,
      '@timezone' => $do->getTimezone()->getName(),
    );
    $watchdog_msg = 'Parameters used during last cron -> Date: @date_param | Timezone: @timezone';
    watchdog(EBConsts::EBS_APPNAME, $watchdog_msg, $watchdog_params, WATCHDOG_INFO);
    // eof: Update watchdog table

    $params = array(EBConsts::EBS_CONFIG_PARAM_CHANGED_SINCE => $date_param,);
    $eba = new EBAttendees($ev);
    $attendees = $eba->loadAttendeesFromResource($params);

    $returned_attendee_list = _eventbrite_sboc_invoke_save($attendees, $save_changed_only, $strictly_process_changed_records);

    // Process mail for records with password reset url set
    $mail_list = array();
    foreach($returned_attendee_list as $mod => $attendee_list){
      foreach($attendee_list as $id => $attendee){
        if (!empty($attendee->passwordResetUrl)) {
          $mail_list[] = $attendee;
        }
      }
    }

    if (!empty($mail_list)) {
      _eventbrite_sboc_invoke_mail($mail_list);
    }

    watchdog(EBConsts::EBS_APPNAME, '@count attendee record(s) processed during last cron',
      array('@count' => count($attendees),), WATCHDOG_INFO);
  }catch(Exception $e){
    watchdog_exception(EBConsts::EBS_APPNAME, $e);
  }
}

/**
* Display/Edit EB info
* @param n/a
* @return  string (Rendered form markup)
*/
function _eventbrite_sboc_event_info(){
  $event_setup_form = drupal_get_form('_eventbrite_sboc_form_event_setup');
  $mark_up = drupal_render($event_setup_form); 
  
  $evt = _eventbrite_sboc_init_event();
  $evt_info = $evt->getEventInfo();

  $event_info_form = drupal_get_form('_eventbrite_sboc_form_event_info', $evt_info);
  $mark_up .= drupal_render($event_info_form);
  
  return $mark_up;
}

/**
* Initlaizes OAuth2 sequence (customized for Eventbrite)
* @param string $settings_label
* @return  array of Attendee objects
*/
function _eventbrite_sboc_init_oauth_sequence(){
  $allowed_tags = array();
  $consumer_key = filter_xss(variable_get(EBConsts::EBS_CONGIFG_EB_CLIENT_ID, ''), $allowed_tags);
  $consumer_secret = filter_xss(variable_get(EBConsts::EBS_CONFIG_CONSUMER_SECRET, ''), $allowed_tags);
  $eb = new EBOauth($consumer_key, $consumer_secret);
  $eb->getEBAccessAuthorization();
}

/**
* Initalizes Event object so dependent objects are able to access data via Eventbrite API
* @param none
* @return  object (EBEvent class)
*/
function _eventbrite_sboc_init_event(){
  $ev = null;
  try{
    $allowed_tags = array();
    $client_id = filter_xss(variable_get(EBConsts::EBS_CONFIG_CONSUMER_KEY, ''), $allowed_tags);
    $client_secret = filter_xss(variable_get(EBConsts::EBS_CONFIG_CONSUMER_SECRET, ''), $allowed_tags);
    $eb_oauth = new EBOauth($client_id, $client_secret); 
    $event_id = filter_xss(variable_get(EBConsts::EBS_CONFIG_EVENT_ID, ''), $allowed_tags);
    $ev = new EBEvents($eb_oauth, $event_id);   
  }catch (Exception $e) {
    watchdog_exception(EBConsts::EBS_APPNAME, $e);
  }  
  
  return $ev;
}

/**
* Callback function to retrieve access code sent from Eventbrite API
* @param none
* @return  n/a
*/
function _eventbrite_sboc_oauth_callback(){
  $allowed_tags = array();
  $client_id = filter_xss(variable_get(EBConsts::EBS_CONFIG_CONSUMER_KEY, ''), $allowed_tags);
  $client_secret = filter_xss(variable_get(EBConsts::EBS_CONFIG_CONSUMER_SECRET, ''), $allowed_tags);
  $eb = new EBOauth($client_id, $client_secret); 
  $eb->getEBAccessToken($_GET['code']);
}

/**
* Interacts with modules that have implementd hook_ebattendees_save
* @param array $attendees (array(Object1, Object2, ObjectN))
* @return  array of Attendee objects
*/
function _eventbrite_sboc_invoke_save($attendees, $save_changed_only = FALSE, $strictly_process_changed_records = TRUE){
  $retval = array();
  $hook_suffix = 'ebattendees_save';
  foreach(module_implements($hook_suffix) as $module){
    $function = $module. '_'. $hook_suffix;
    $retval[$function] = $function($attendees, $save_changed_only, $strictly_process_changed_records);
    $retval[$function] = (empty($retval[$function]) ? array() : $retval[$function]);
  }
  
  return $retval;
}

/**
* Interacts with modules that have implementd hook_ebattendees_save
* @param array $attendees (array(Object1, Object2, ObjectN))
* @return array of Attendee objects
*/
function _eventbrite_sboc_invoke_save_withvalues($attendees, $values){
  $retval = array();
  $hook_suffix = 'ebattendees_save_withvalues';
  foreach(module_implements($hook_suffix) as $module){
    $function = $module. '_'. $hook_suffix;
    $retval[$function] = $function($attendees, $values);
    if (empty($retval[$function])){
      $retval[$function] = array();
    }
  }
  
  return $retval;
}

/**
* Interacts with modules that have implemented hook_ebattendees_mail
* @param array $attendees (array(Object1, Object2, ObjectN))
* @return  array of Attendee objects
*/
function _eventbrite_sboc_invoke_mail($attendees, $message_id = EBConsts::EBS_CONFIG_EMAIL_MESSAGE_NODE_ID_1){
  $retval = array();
  $hook_suffix = 'ebattendees_mail';
  foreach(module_implements($hook_suffix) as $module){
    $function = $module. '_'. $hook_suffix;
    $retval[$function] = $function($attendees, $message_id);
  }
  
  return $retval;
}

/**
 * @param $attendees
 * @param string $message_id
 * @return array
 */
function _eventbrite_sboc_invoke_mail_internal($attendees, $message_id = EBConsts::EBS_CONFIG_EMAIL_MESSAGE_NODE_ID_3){
  $retval = array();
  $hook_suffix = 'ebattendees_mail_internal';
  foreach(module_implements($hook_suffix) as $module){
    $function = $module. '_'. $hook_suffix;
    $retval[$function] = $function($attendees, $message_id);
  }

  return $retval;
}

/**
* Calls builder function to display data entry form
*   Redirects to display page
*
* @param Array $form
* @param Array &$form_state
*
* Return n/a
*/
function _eventbrite_sboc_submit_order_num($form, &$form_state){
  $allowed_tags = array();
  $order_num = filter_xss($form_state['values']['ebs_order_num'], $allowed_tags);
  drupal_goto('/'. EBConsts::EBS_ADMINMENUROOT. "/event/orders/{$order_num}");
}

/**
* Calls builder function to display data entry form
*   Redirects to display page
*
* @param Array $form
* @param Array &$form_state
*
* Return n/a
*/
function _eventbrite_sboc_submit_attendee_order_num($form, &$form_state){
  $allowed_tags = array();
  $order_num = filter_xss($form_state['values']['ebs_attendee_order_num'], $allowed_tags);
  drupal_goto('/'. EBConsts::EBS_ADMINMENUROOT. "/event/attendees/{$order_num}");
}

/**
* Autoloader function called by menu router item
* @param string $order_num
* @return Eventbrite Order List
*/
function order_load($order_num){
  return _eventbrite_sboc_fetch_order($order_num, '');
}

/**
* Autoloader function called by menu router item
* @param string $order_num
* @return Eventbrite Order List
*/
function attendee_order_load($order_num){
  return _eventbrite_sboc_fetch_order($order_num);
}



function _eventbrite_sboc_display_order($order){
  dpm($order, 'Order & Attendee');
  return 'Response from: '. __FUNCTION__;
}

/**
* Fetches order object via EB API
*
* @param string $order_num
* @param string $expansion (default attendees,event)
* @return  Object $order or FALSE
*/
function _eventbrite_sboc_fetch_order($order_num, $expansion = EBConsts::EBS_ORDER_EXPANSIONS_ATTENDEES){
  $order_num = check_plain($order_num);
  $retval = FALSE;  
  try{
    $ev = _eventbrite_sboc_init_event();
    $retval = $ev->getOrderByNumber($order_num, $expansion);
  }catch(Exception $e){
    watchdog_exception(EBConsts::EBS_APPNAME, $e);
    $retval = FALSE;
  }
  return $retval;
}


/**
* Helper function to retrieve Eventbrite attendee records from an order
* @param string $url - a url typically supplied by Eventbrite via its wehhook API
* @return  array of Attendee objects
*/
function _eventbrite_sboc_order($url){
  $attendees = array();
  try{
    $ev = _eventbrite_sboc_init_event();
    $order = $ev->getOrderByUrl($url, EBConsts::EBS_ORDER_EXPANSIONS); 
    if (is_array($order->attendees) && !empty($order->attendees)){
      $eba = new EBAttendees($ev);
      $attendees = $eba->loadAttendeesFromArray($order->attendees);
    }  
  }catch(Exception $e){
    watchdog_exception(EBConsts::EBS_APPNAME, $e);  
  }
  
  return $attendees;
}

/**
* Callback function to validate access to url resource which is the value of 
* EBConsts::EBS_WEBHOOK_ORDER_PLACED
* See class EBConsts
*
* Returns boolean
*/
function _eventbrite_sboc_webhook_access_check(){
   // Check url
   return TRUE;
}

/**
 * Callback function to handle Eventbrite 'order.placed' webhook calls
 * $returned_attendee_list in the format $returned_attendee_list[function_name][list_of_objects]
 */
function _eventbrite_sboc_webhook_callback(){
  $attendees = array();
  try{
    $input_json = file_get_contents(EBConsts::EBS_PHP_INPUT_STREAM);
    $input_json_array = json_decode($input_json, TRUE);

    $eb_webhook_user_id_received = !empty($input_json_array['config']['user_id']) ? $input_json_array['config']['user_id'] : t('EMPTY');
    $webhook_user_id_stored = variable_get(EBConsts::EBS_CONFIG_WEBHOOK_USERT_ID, '');

    if (empty($webhook_user_id_stored) || ($eb_webhook_user_id_received != $webhook_user_id_stored)){
      watchdog(EBConsts::EBS_APPNAME, t('Webhook user id validation test failed. Received: (@uid). Check Event Settings page for valid entry.'),
        array('@uid' => $eb_webhook_user_id_received), WATCHDOG_ALERT);
      return;
    }

    $eb_webhook_type = !empty($input_json_array['config']['action']) ? $input_json_array['config']['action'] : '';
    $url = $input_json_array[EBConsts::EBS_JSON_PARAM_API_URL];

    switch($eb_webhook_type){
      case EBConsts::EBS_WEBHOOK_CONFIG_ACTION_ORDER_PLACED:
        $attendees = _eventbrite_sboc_order($url);
        if (!empty($attendees)){
          $returned_attendee_list = _eventbrite_sboc_invoke_save($attendees);
          foreach($returned_attendee_list as $mod => $attendee_list){
            _eventbrite_sboc_invoke_mail($attendee_list);
            _eventbrite_sboc_invoke_mail_internal($attendee_list);
          }
        }
        break;
      case EBConsts::EBS_WEBHOOK_CONFIG_ACTION_ORDER_UPDATED:
        break;
      default:
        break;
    }

    watchdog(EBConsts::EBS_APPNAME, 'Incoming url => @url', array('@url' => $url,), WATCHDOG_INFO);
    
  }catch(Exception $e){
    watchdog_exception(EBConsts::EBS_APPNAME, $e);  
  }
}

/**
*  Debug area!! No dumping! Actual no out side garbage!
**/

function _eventbrite_sboc_debug_output($var){
  $function_name = debug_backtrace(DEBUG_BACKTRACE_PROVIDE_OBJECT, 2);
  if (is_object($var)){
    $var = get_object_vars($var);
  }
  $debug_msg = print_r($var, TRUE);
  $args = array('!function_name' => $function_name[1]['function'], '!debug_msg' => $debug_msg,);
  watchdog(EBConsts::EBS_APP_NAME_MAIN, 'CALLED FROM: !function_name => DEBUG OUTPUT: !debug_msg', $args, WATCHDOG_INFO);
}